---
title: Migrating Data in MySQL for PCF
owner: MySQL
---

<strong><%= modified_date %></strong>

<%= partial "./galera_beta" %>

This topic describes how to migrate the data from any MySQL database to a MySQL
for PCF service instance.

## <a id='use-cases'></a>Use Cases

The workflows described in this topic support the following use cases:

+ Migrating from the deprecated
  [MySQL for PCF v1.x](https://docs.pivotal.io/p-mysql/1-10/) to MySQL for PCF v2.x.
+ Migrating from a single-node or leader-follower plan to highly available (HA) cluster plan.
+ Migrating from an HA cluster plan to single-node or leader-follower plan.
+ Migrating from an off-platform database to MySQL for PCF v2.x.

<p class="note warning"><strong>WARNING</strong>: Migrating large datasets can take several hours.
Migration of the data is linear, and depends on the hardware being used.
For example, if X amount of data takes 10 minutes to migrate, then 2X amount of data will take 20 minutes to migrate using the same hardware.
Do a test migration with small datasets to estimate how long the entire migration will take before migrating larger datasets.</p>

## <a id='prepare'></a>Prerequisites

To perform the procedures in this topic, you must have the following:

* An existing MySQL database that is the data source you want to migrate from.
  This can be:
  * a MySQL for PCF v1 service instance
  * a MySQL for PCF v2 service instance
  * a non-Pivotal MySQL database
* MySQL for PCF v2.x installed in the target PCF environment you wish to migrate to.
* A MySQL for PCF service plan available in the targeted Org and Space you want
  to migrate your data to. The service plan should have the correct topology and
  resources for your target database.

<p class="note"><strong>Note</strong>: To view available service plans, run <code>cf marketplace</code>.
  MySQL for PCF v2.x appears as <code>p.mysql</code> and MySQL for PCF v1.x appears as <code>p-mysql</code>.</p>

## <a id='install-plugin'></a>Install the mysql-tools CF CLI Plugin

Operators and Developers should use the `mysql-tools` CF CLI plugin to migrate
data from a source MySQL database to a MySQL for PCF v2.x service instance.

Do the following to install the `mysql-tools` CF CLI plugin:

1. Run the following command:

    ```
    cf install-plugin -r CF-Community "MysqlTools"
    ```
2. Ensure the plugin has installed successfully by running the following command:

    ```
    cf mysql-tools --version
    ```
3. You can run the following command to view plugin usage details:

    ```
    cf mysql-tools -h
    ```
    An example output:
    <pre class="terminal">
    $ cf mysql-tools -h
    NAME:
       mysql-tools - Plugin to migrate mysql instances

    USAGE:
       cf mysql-tools migrate [-h] [--no-cleanup] &lt;v1-service-instance&gt; &lt;plan-type&gt;
       cf mysql-tools version
    </pre>

The `migrate` command will perform a streaming mysqldump and restore to migrate
data from your source MySQL database to a target MySQL for PCF v2 instance. This
command will skip the following system schemas:

- `cf_metadata`
- `information_schema`
- `mysql`
- `performance_schema`
- `sys`

Additionally, the migration will skip MySQL stored routines, events, and triggers.
Users must migrate these types of data manually.

The `migrate` command gives the target MySQL for PCF v2 instance the same name
as the source MySQL service instance name. It appends `-old` to the source
service instance name.

### <a id='security'></a>Security

The `migration` command supports connections over TLS. If TLS is configured in
source and target MySQL instances, the channel through which data is streamed
will be secured via TLS.

For information on how to configure TLS in your service instance, see

### <a id='debugging'></a>Debugging

For debug purposes, optionally add the `--no-cleanup` flag.
This flag preserves the app that runs the migration task and the newly created service instances
if the migration is not successful. However, if a migration succeeds, the migration app is cleaned
even if the <code>--no-cleanup</code> flag is provided.

An error message appears if the migration is not successful.
If the migration **is** successful, a <code>Migration completed successfully</code> message appears
in the messages returned to you after you run the migration command, as show in the example below.
This message is the best indication that your migration process was successfully completed.

For example:
<pre class="terminal">
$ cf mysql-tools migrate my-instance db-small
2018/04/24 11:31:19 Creating new service instance "my-instance" for service p.mysql using plan db-small
2018/04/24 11:41:01 Unpacking assets for migration to /var/folders/dm/66n2j9xx02l8vs58q2whz4080000gn/T/migrate_app_101341527
2018/04/24 11:41:02 Started to push app
Done uploading
2018/04/24 11:41:09 Successfully pushed app
2018/04/24 11:41:10 Successfully bound app to v1 instance
2018/04/24 11:41:12 Successfully bound app to v2 instance
2018/04/24 11:41:12 Starting migration app
2018/04/24 11:41:25 Started to run migration task
2018/04/24 11:41:27 Migration completed successfully
2018/04/24 11:41:29 Cleaning up...
</pre>

## <a id='migrate-data'></a>Migrate Data

This section describes how to migrate data from the source MySQL database to a
new destination MySQL for PCF v2.x service instance. It covers the following
scenarios:

+ [Migrating within an Org/Space](#within-org-space)
+ [Migrating across Orgs/Spaces](#across-orgs-spaces)
+ Migrating from a MySQL database that is in a different PCF foundation, or is
  not on any PCF foundation.

To begin, make sure the MySQL for PCF v2 service plan that you will use for your
migration target has your preferred VM type and persistent disk size. The migration
will not succeed if there is not enough space on disk to store the data.

### <a id='within-org-space'></a>Migrating within an Org/Space

Do the following steps to migrate your data:

1. Stop and unbind all apps that are sending traffic to the source MySQL service
   instance by running the following command for each app:

    ```
    cf stop APP
    ```
   Where `APP` is the name of your app.
   <br><br>
   For example:
   <pre class="terminal">
   $ cf stop my-app
   Stopping app my-app in org my-org / space my-space as user<span>@</span>example.com...
   OK </pre>
   To retrieve a list of bound apps, run `cf services`.

1. Unbind your app from the MySQL for PCF service instance.
Run the following command for each app bound to the instance:

    ```
    cf unbind-service APP SOURCE-INSTANCE
    ```
    Where:
    * `APP` is the name of your app.
    * `SOURCE-INSTANCE` is the name of your source MySQL for PCF service instance.
    <br><br>
    For example:
    <pre class="terminal">
    $ cf unbind-service my-app my-instance
    Unbinding app my-app from service my-instance in org my-org / space my-space as user<span>@</span>example.com...
    OK
    </pre>
1. Use the plugin to migrate your data.
  Run the following command:

    ```
    cf mysql-tools migrate SOURCE-INSTANCE V2-PLAN
    ```
    Where:
    * `SOURCE-INSTANCE` is the name of your source MySQL service instance.
    * `V2-PLAN` is the name of the MySQL for PCF v2 service plan to use for the new MySQL for PCF v2 service instance.
    For example, `db-small`.
    To view available MySQL for PCF v2 service plans, run `cf marketplace` and locate the plans under `p.mysql`.

### <a id='across-orgs-spaces'></a>Migrating across Orgs/Spaces

If your source MySQL service instance is in a different Org/Space than your target
Org/Space, you can still migrate your data by using the service instance sharing
feature.

<p class="note"><strong>Note</strong>: If you are using PCF v2.3 or later,
  service instance sharing for MySQL for PCF v2 is enabled by default. If you
  are using PCF v2.2 or v2.1, you may require an administrator to enable this
  feature. For more information, see
<a href="https://docs.pivotal.io/pivotalcf/devguide/services/sharing-instances.html#enabling">
  Enabling Service Instance Sharing in Cloud Foundry</a>.</p>


To migrate your data across Orgs/Spaces, do the following steps:

1. Share the source MySQL service instance to your target Org and Space.

    ```
    cf share-service SOURCE_MYSQL_INSTANCE -o TARGET_ORG -s TARGET_SPACE
    ```

1. Verify that you can access the source service instance from the target Org/Space.
   First, run the following command to target your target Org and Space:

    ```
    cf target -o TARGET_ORG -s TARGET_SPACE
    ```
1. Then, run the following command to ensure your source service instance was
   shared successfully.

    ```
    cf services
    ```
1. Stop and unbind all apps that are sending traffic to the source MySQL service
   instance by running the following command for each app:

    ```
    cf stop APP
    ```
   Where `APP` is the name of your app.
   <br><br>
   For example:
   <pre class="terminal">
   $ cf stop my-app
   Stopping app my-app in org my-org / space my-space as user<span>@</span>example.com...
   OK </pre>
   To retrieve a list of bound apps, run `cf services`.

1. Unbind your app from the MySQL for PCF service instance.
Run the following command for each app bound to the instance:

    ```
    cf unbind-service APP SOURCE-INSTANCE
    ```
    Where:
    * `APP` is the name of your app.
    * `SOURCE-INSTANCE` is the name of your source MySQL for PCF service instance.
    <br><br>
    For example:
    <pre class="terminal">
    $ cf unbind-service my-app my-instance
    Unbinding app my-app from service my-instance in org my-org / space my-space as user<span>@</span>example.com...
    OK
    </pre>
1. Use the plugin to migrate your data.
  Run the following command:

    ```
    cf mysql-tools migrate SOURCE-INSTANCE V2-PLAN
    ```
    Where:
    * `SOURCE-INSTANCE` is the name of your source MySQL service instance.
    * `V2-PLAN` is the name of the MySQL for PCF v2 service plan to use for the new MySQL for PCF v2 service instance.
    For example, `db-small`.
    To view available MySQL for PCF v2 service plans, run `cf marketplace` and locate the plans under `p.mysql`.

### <a id='off-platform'></a>Migrating from Off-Platform

If your source MySQL database is in a different PCF foundation, or not deployed
on PCF at all, you can utilize the user-provided service instances feature to
migrate your data to MySQL for PCF v2. For more information on user-provided
service instances, see
[User-Provided Service Instances](https://docs.pivotal.io/pivotalcf/2-4/devguide/services/user-provided.html)

To migrate your data from off-platform, do the following steps:

1. Ensure your off-platform MySQL database allows inbound and outbound network
    traffic to your target PCF foundation. You may need to modify firewall rules
    for your off-platform MySQL. Talk to your Operator for assistance.
1. If your off-platform MySQL database requires connections over TLS, make sure
    that your PCF foundation is configured to recognize the CA that the MySQL server
    certificate is signed with.
1. Verify that you can access the source service instance from the target Org/Space.
   First, run the following command to target your target Org and Space:

    ```
    cf target -o TARGET_ORG -s TARGET_SPACE
    ```
1. Then, run the following command to ensure your source service instance was
   shared successfully.

    ```
    cf services
    ```
1. Stop and unbind all apps that are sending traffic to the source MySQL service
   instance by running the following command for each app:

    ```
    cf stop APP
    ```
   Where `APP` is the name of your app.
   <br><br>
   For example:
   <pre class="terminal">
   $ cf stop my-app
   Stopping app my-app in org my-org / space my-space as user<span>@</span>example.com...
   OK </pre>
   To retrieve a list of bound apps, run `cf services`.

1. Unbind your app from the MySQL for PCF service instance.
Run the following command for each app bound to the instance:

    ```
    cf unbind-service APP SOURCE-INSTANCE
    ```
    Where:
    * `APP` is the name of your app.
    * `SOURCE-INSTANCE` is the name of your source MySQL for PCF service instance.
    <br><br>
    For example:
    <pre class="terminal">
    $ cf unbind-service my-app my-instance
    Unbinding app my-app from service my-instance in org my-org / space my-space as user<span>@</span>example.com...
    OK
    </pre>
1. Use the plugin to migrate your data.
  Run the following command:

    ```
    cf mysql-tools migrate SOURCE-INSTANCE V2-PLAN
    ```
    Where:
    * `SOURCE-INSTANCE` is the name of your source MySQL service instance.
    * `V2-PLAN` is the name of the MySQL for PCF v2 service plan to use for the new MySQL for PCF v2 service instance.
    For example, `db-small`.
    To view available MySQL for PCF v2 service plans, run `cf marketplace` and locate the plans under `p.mysql`.

## <a id='stop-unbind'></a>Stop and Unbind Apps


## <a id='migrate-data'></a>Migrate Data

To migrate the data from the source MySQL for PCF service instance to a new destination MySQL for PCF v2.x service instance, use the `cf mysql-tools` plugin.

The `migrate` command of the plugin renames the MySQL for PCF service instance by appending `-old` and gives the original name of the instance to the newly created MySQL for PCF v2.x service instance.

Do the following to migrate data to an instance of the same name:

1. Install the `cf mysql-tools` plugin.
  Run the following command:

    ```
    cf install-plugin -r CF-Community "MysqlTools"
    ```



Developers can SSH into the app container to examine the logs.


## <a id='validate-data'></a>Validate Data

After migrating your data, you must verify that the data has successfully migrated by validating the data in the new MySQL for PCF v2.x service instance.
You can validate the data by creating an SSH tunnel to gain direct command line access to the new MySQL for PCF v2.x service instance.

Do the following to create an SSH tunnel to the instance and validate your data:

1. Create an SSH tunnel to your MySQL for PCF v2.x service instance.
To do this, perform the steps in the
following sections of [Accessing Services with SSH](https://docs.pivotal.io/pivotalcf/devguide/deploy-apps/ssh-services.html):

    1. Push Your Host App

    1. Create Your Service Key

    1. Configure Your SSH Tunnel

    1. Access Your Service Instance

1. From the MySQL shell, validate that the data that you expect to see has been imported into the MySQL for PCF v2.x service instance.

1. Exit the MySQL shell and kill the SSH tunnel.

## <a id='rebind-restage'></a>Rebind and Restage Apps

To complete the migration, rebind and restage any apps that had been bound to the original MySQL for PCF service instance.

Do the following to rebind and restage your apps:

1. Bind the app to the new service instance.
Run the following command:

    ```
    cf bind-service APP V2-INSTANCE
    ```
    <br>
    Where:
    * `APP` is the name of your app.
    * `V2-INSTANCE` is the name of your MySQL for PCF v2.x service instance.
    <br><br>
    For example:
    <pre class="terminal">
    $ cf bind-service my-app my-v2-instance
    Binding service my-v2-instance to app my-app in org my-org / space my-space as user<span>@</span>example.com...
    OK
    TIP: Use 'cf restage my-app' to ensure your env variable changes take effect
    </pre>

1. Restage the app.
  For example:
  <pre class="terminal">
  $ cf restage my-app
  Restaging app my-app in org my-org / space my-space as user<span>@</span>example.com...
  [...]
  </pre>
  The app is now using your new MySQL for PCF v2.x service instance and should be operational again.

## <a id='delete-old-database'></a> Delete the Old Database

After rebinding and restaging your apps to confirm that migration was successful, Pivotal recommends saving resources by deleting the old database instance.

To perform the deletion, run the following command:

  ```
  cf delete-service SOURCE-INSTANCE
  ```
  <br>
  Where `SOURCE-INSTANCE` is the name of your old database instance.

  For example:

  <pre class="terminal">$ cf delete-service my-instance</pre>
